import express, { RequestHandler } from "express";
import cors from "cors";
import { connectToRabbitMQ, getChannel } from "./utils/rabbitmq";

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–º–µ–Ω –æ—á–µ—Ä–µ–¥–µ–π
const USER_SERVICE_QUEUE = "user-service";
const STATUS_SERVICE_QUEUE = "status-service";

interface ServiceResponse {
  statusCode: number;
  correlationId: string;
  data?: {
    message?: string;
    error?: string;
    user?: {
      firstName: string;
      lastName: string;
      login: string;
      role: string;
    };
  };
  error?: string;
}

const app = express();
let isRabbitMQReady = false;

app.use(cors());
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ
connectToRabbitMQ()
  .then(() => {
    console.log("‚úÖ Gateway —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ RabbitMQ");
    isRabbitMQReady = true;

    // –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
    const channel = getChannel();
    channel
      .assertQueue(USER_SERVICE_QUEUE, { durable: true })
      .then(() => {
        console.log(`‚úÖ –û—á–µ—Ä–µ–¥—å ${USER_SERVICE_QUEUE} —Å–æ–∑–¥–∞–Ω–∞`);
        return channel.checkQueue(USER_SERVICE_QUEUE);
      })
      .then((queueInfo) => {
        console.log(`üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥–∏ ${USER_SERVICE_QUEUE}:`);
        console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${queueInfo.messageCount}`);
        console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π: ${queueInfo.consumerCount}`);
      })
      .catch((err) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ—á–µ—Ä–µ–¥—å—é:", err);
      });
  })
  .catch((err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ:", err);
  });

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RabbitMQ
const checkRabbitMQReady: RequestHandler = (req, res, next) => {
  if (!isRabbitMQReady) {
    console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ...");
    res.status(503).json({ error: "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." });
    return;
  }
  next();
};

app.use("/api/*", checkRabbitMQReady);

// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.all("/api/*", async (req, res) => {
  const { method, path, body } = req;
  const service = determineService(path);
  const startTime = Date.now();

  console.log(`\nüîÑ [${new Date().toISOString()}] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:`);
  console.log(`üì® –ú–µ—Ç–æ–¥: ${method}, –ü—É—Ç—å: ${path}`);
  console.log(`üìù –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:`, body);
  console.log(`üéØ –°–µ—Ä–≤–∏—Å: ${service}`);

  try {
    const channel = getChannel();
    const correlationId = generateCorrelationId();

    // –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const responseQueue = `response-${correlationId}`;
    await channel.assertQueue(responseQueue, { exclusive: true });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = {
      method,
      path: path.replace("/api", ""),
      body,
      query: req.query,
      correlationId,
      responseQueue,
      timestamp: new Date().toISOString(),
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è –∏–º–µ–Ω–∏ –æ—á–µ—Ä–µ–¥–∏
    const targetQueue = service === "user" ? USER_SERVICE_QUEUE : STATUS_SERVICE_QUEUE;

    channel.sendToQueue(targetQueue, Buffer.from(JSON.stringify(message)));
    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å ${targetQueue}`);

    // –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    const response = await waitForResponse(correlationId, responseQueue);
    const processingTime = Date.now() - startTime;

    console.log(`\n‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç (${processingTime}ms):`, response);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
    if (response.error) {
      res.status(response.statusCode).json({ error: response.error });
    } else {
      res.status(response.statusCode).json(response.data);
    }
  } catch (error: unknown) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:`, error);
    res.status(500).json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
    });
  }
});

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
function determineService(path: string): string {
  if (path.startsWith("/api/auth") || path.startsWith("/api/users")) {
    return "user";
  } else if (path.startsWith("/api/status")) {
    return "status";
  }
  return "unknown";
}

function generateCorrelationId(): string {
  return Math.random().toString(36).substring(2) + Date.now().toString(36);
}

async function waitForResponse(
  correlationId: string,
  responseQueue: string,
): Promise<ServiceResponse> {
  const channel = getChannel();
  return new Promise((resolve, reject) => {
    const timeout = setTimeout(() => {
      channel.deleteQueue(responseQueue).catch(console.error);
      reject(new Error("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"));
    }, 30000);

    channel.consume(responseQueue, (msg) => {
      if (msg) {
        const response = JSON.parse(msg.content.toString()) as ServiceResponse;
        if (response.correlationId === correlationId) {
          clearTimeout(timeout);
          channel.ack(msg);
          setTimeout(() => {
            channel.deleteQueue(responseQueue).catch(console.error);
          }, 1000);
          resolve(response);
        }
      }
    });
  });
}

export default app;
