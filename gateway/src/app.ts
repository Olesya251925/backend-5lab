import express from "express";
import cors from "cors";
import { connectToRabbitMQ, getChannel } from "./utils/rabbitmq";

const app = express();

app.use(cors());
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
setTimeout(() => {
  connectToRabbitMQ()
    .then(() => {
      console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ RabbitMQ");
    })
    .catch((err) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ:", err);
    });
}, 10000); // 10 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏

// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.all("*", async (req, res) => {
  const { method, path, body } = req;
  const service = determineService(path);
  console.log(`üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: ${method} ${path}`);

  try {
    const channel = getChannel();
    const correlationId = generateCorrelationId();
    console.log(`üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ—Ä–≤–∏—Å ${service} —Å ID: ${correlationId}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ—á–µ—Ä–µ–¥—å
    channel.sendToQueue(`${service}-service`, Buffer.from(JSON.stringify({ method, path, body })), {
      correlationId,
    });

    // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞
    const response = await waitForResponse(correlationId);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ ${service}`);
    res.status(response.status).json(response.data);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error}`);
    res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

function determineService(path: string): string {
  if (path.startsWith("/auth") || path.startsWith("/users")) {
    return "user";
  } else if (path.startsWith("/status")) {
    return "status";
  }
  return "unknown";
}

function generateCorrelationId(): string {
  return Math.random().toString() + Date.now().toString();
}

async function waitForResponse(correlationId: string): Promise<any> {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
  // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –æ–∂–∏–¥–∞–Ω–∏—è
  return { status: 200, data: { message: "Success" } };
}

export default app;
