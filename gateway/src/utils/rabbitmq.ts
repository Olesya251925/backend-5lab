import * as amqp from "amqplib";

let channel: amqp.Channel | null = null;
let connection: amqp.Connection | null = null;
let isConnecting = false;

export const connectToRabbitMQ = async (retries = 5, delay = 5000): Promise<void> => {
  if (isConnecting) {
    console.log("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...");
    return;
  }

  isConnecting = true;

  for (let i = 0; i < retries; i++) {
    try {
      const rabbitmqUrl = process.env.RABBITMQ_URL || "amqp://rabbitmq";
      console.log(`\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ:`);
      console.log(`   URL: ${rabbitmqUrl}`);
      console.log(`   –ü–æ–ø—ã—Ç–∫–∞: ${i + 1}/${retries}`);

      connection = await amqp.connect(rabbitmqUrl);
      console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ RabbitMQ");

      channel = await connection.createChannel();
      console.log("‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
      connection.on("error", (err) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RabbitMQ:", err);
        handleConnectionError();
      });

      connection.on("close", () => {
        console.log("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ");
        handleConnectionError();
      });

      channel.on("error", (err) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞ RabbitMQ:", err);
        handleChannelError();
      });

      channel.on("close", () => {
        console.log("‚ö†Ô∏è –ö–∞–Ω–∞–ª RabbitMQ –∑–∞–∫—Ä—ã—Ç");
        handleChannelError();
      });

      isConnecting = false;
      return;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/${retries}):`, error);

      if (i < retries - 1) {
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay / 1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise((resolve) => setTimeout(resolve, delay));
      } else {
        isConnecting = false;
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫`);
      }
    }
  }
};

const handleConnectionError = () => {
  channel = null;
  connection = null;
  if (!isConnecting) {
    setTimeout(() => connectToRabbitMQ(), 5000);
  }
};

const handleChannelError = () => {
  channel = null;
  if (connection && !isConnecting) {
    connection
      .createChannel()
      .then((newChannel) => {
        channel = newChannel;
        console.log("‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω");
      })
      .catch((err) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:", err);
        handleConnectionError();
      });
  }
};

export const getChannel = () => {
  if (!channel) {
    throw new Error("–ö–∞–Ω–∞–ª RabbitMQ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  }
  return channel;
};

export const isConnected = () => {
  return channel !== null && connection !== null;
};
