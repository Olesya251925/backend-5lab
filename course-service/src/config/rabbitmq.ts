import amqp from "amqplib";
import {
  getCourses,
  getCourseById,
  createCourse,
  updateCourse,
  deleteCourse,
  addToFavorites,
  removeFromFavorites,
  getCourseWithTags,
} from "../controllers/courseController";
import { Request, Response } from "express";

const RABBITMQ_URL = process.env.RABBITMQ_URL || "amqp://guest:guest@rabbitmq:5672";

interface CustomResponse {
  statusCode: number;
  data: unknown;
  status(code: number): CustomResponse;
  json(data: unknown): CustomResponse;
  end(): CustomResponse;
}

interface RabbitMQMessage {
  method: string;
  path: string;
  body: unknown;
  query?: Record<string, string>;
  responseQueue: string;
  correlationId: string;
}

export async function connectQueue() {
  try {
    console.log("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ...");
    const connection = await amqp.connect(RABBITMQ_URL);
    const channel = await connection.createChannel();

    await channel.assertQueue("course-service");
    console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ RabbitMQ");
    console.log("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...");

    channel.consume("course-service", async (data) => {
      if (data) {
        const message = JSON.parse(data.content.toString()) as RabbitMQMessage;
        console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);

        const req = {
          method: message.method,
          path: message.path,
          body: message.body,
          query: message.query || {},
        } as Request;

        const res: CustomResponse = {
          statusCode: 200,
          data: null,
          status(code: number) {
            this.statusCode = code;
            return this;
          },
          json(data: unknown) {
            this.data = data;
            return this;
          },
          end() {
            this.data = null;
            return this;
          },
        };

        console.log("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", message.method, message.path);

        if (message.method === "GET" && message.path === "/api/courses") {
          console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤");
          await getCourses(req, res as unknown as Response, () => {});
        }
        // –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –ø–æ ID
        else if (message.method === "GET" && message.path === "/api/courses/:id") {
          console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ ID");
          await getCourseById(req, res as unknown as Response, () => {});
        }
        // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å
        else if (message.method === "POST" && message.path === "/api/courses") {
          console.log("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞");
          await createCourse(req, res as unknown as Response, () => {});
        }
        // –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å
        else if (message.method === "PUT" && message.path === "/api/courses/:id") {
          console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞");
          await updateCourse(req, res as unknown as Response, () => {});
        }
        // –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å
        else if (message.method === "DELETE" && message.path === "/api/courses/:id") {
          console.log("–£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞");
          await deleteCourse(req, res as unknown as Response, () => {});
        }
        // –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Å —Ç–µ–≥–∞–º–∏
        else if (message.method === "GET" && message.path === "/api/courses/:id/tags") {
          console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —Å —Ç–µ–≥–∞–º–∏");
          await getCourseWithTags(req, res as unknown as Response, () => {});
        }
        // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        else if (message.method === "POST" && message.path === "/api/courses/favorite/:id") {
          console.log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
          await addToFavorites(req, res as unknown as Response, () => {});
        }
        // –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        else if (message.method === "DELETE" && message.path === "/api/courses/favorite/:id") {
          console.log("–£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ");
          await removeFromFavorites(req, res as unknown as Response, () => {});
        } else {
          console.log(" –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:", message.path);
          res.status(404).json({ error: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        console.log(" –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞:", {
          statusCode: res.statusCode,
          data: res.data,
        });

        if (res.statusCode >= 400) {
          channel.sendToQueue(
            message.responseQueue,
            Buffer.from(
              JSON.stringify({
                statusCode: res.statusCode,
                error:
                  (res.data as { message?: string })?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
                correlationId: message.correlationId,
              }),
            ),
          );
        } else {
          channel.sendToQueue(
            message.responseQueue,
            Buffer.from(
              JSON.stringify({
                statusCode: res.statusCode,
                data: res.data,
                correlationId: message.correlationId,
              }),
            ),
          );
        }

        channel.ack(data);
        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ");
      }
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ:", error);
    process.exit(1);
  }
}
