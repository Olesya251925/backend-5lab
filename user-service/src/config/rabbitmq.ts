import amqp from 'amqplib';
import { register, login, getUserByLogin, deleteUser } from '../controllers/authController';
import { Request, Response } from 'express';

const RABBITMQ_URL = process.env.RABBITMQ_URL || 'amqp://guest:guest@rabbitmq:5672';

interface CustomResponse {
  statusCode: number;
  data: any;
  status(code: number): CustomResponse;
  json(data: any): CustomResponse;
  end(): CustomResponse;
}

export async function connectQueue() {
  try {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ...');
    const connection = await amqp.connect(RABBITMQ_URL);
    const channel = await connection.createChannel();

    // –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await channel.assertQueue('user-service');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ RabbitMQ');
    console.log('üëÇ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...');

    channel.consume('user-service', async (data) => {
      if (data) {
        const message = JSON.parse(data.content.toString());
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);

        const req = {
          method: message.method,
          path: message.path,
          body: message.body,
          query: message.query || {}
        } as Request;

        const res: CustomResponse = {
          statusCode: 200,
          data: null,
          status(code: number) {
            this.statusCode = code;
            return this;
          },
          json(data: any) {
            this.data = data;
            return this;
          },
          end() {
            this.data = null;
            return this;
          }
        };

        console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', message.method, message.path);
        
        if (message.method === 'POST' && message.path === '/auth/register') {
          console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          await register(req, res as unknown as Response);
        } else if (message.method === 'POST' && message.path === '/auth/login') {
          console.log('üîë –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          await login(req, res as unknown as Response);
        } else if (message.method === 'GET' && message.path === '/auth/me') {
          console.log('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          await getUserByLogin(req, res as unknown as Response);
        } else if (message.method === 'DELETE' && message.path === '/auth/delete') {
          console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          await deleteUser(req, res as unknown as Response);
        } else {
          console.log('‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', message.path);
          res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞:', {
          statusCode: res.statusCode,
          data: res.data
        });

        if (res.statusCode >= 400) {
          channel.sendToQueue(
            message.responseQueue,
            Buffer.from(JSON.stringify({
              statusCode: res.statusCode,
              error: res.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞',
              correlationId: message.correlationId
            }))
          );
        } else {
          channel.sendToQueue(
            message.responseQueue,
            Buffer.from(JSON.stringify({
              statusCode: res.statusCode,
              data: res.data,
              correlationId: message.correlationId
            }))
          );
        }

        channel.ack(data);
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ:', error);
    process.exit(1);
  }
} 